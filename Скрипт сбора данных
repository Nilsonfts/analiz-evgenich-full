/************ –ö–û–ù–§–ò–ì ************/
const CFG = {
  SHEETS: {
    NEW: '–ê–º–æ –í—ã–≥—Ä—É–∑–∫–∞',
    FULL: '–í—ã–≥—Ä—É–∑–∫–∞ –ê–º–æ –ü–æ–ª–Ω–∞—è',
    SITE: '–ó–∞—è–≤–∫–∏ —Å –°–∞–π—Ç–∞',
    RES:  'Reserves RP',
    GUE:  'Guests RP',
    CALL: '–ö–æ–ª–ª–¢—Ä–µ–∫–∏–Ω–≥',
    OUT:  '–†–ê–ë–û–ß–ò–ô –ê–ú–û',
    DIAG: '_DIAG',
    NEW_ONLY: '–ù–û–í–´–ï',
    PROBLEM: '–ü–†–û–ë–õ–ï–ú–ù–´–ï',
    LOG: 'LOG'
  },
  KEY: '–°–¥–µ–ª–∫–∞.ID',
  CLOSED_RE: /(–∑–∞–∫—Ä—ã|—É—Å–ø–µ—à|–Ω–µ—É—Å–ø–µ—à|–æ–ø–ª–∞—á)/i,
  PHONE_SPLIT_RE: /[;,]/,
  COLORS: { NEW:'#ccffcc', URGENT:'#ffe599', OVERDUE:'#f4cccc', LONG:'#fff2cc' },
  STATUS_COLORS: {
    '–ó–∞–∫—Ä—ã—Ç–æ –∏ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ': '#f4cccc', // light red
    '–û—Ç–º–µ–Ω–µ–Ω –≤ –†–µ—Å—Ç–æ–ø–ª–µ–π—Å': '#f4cccc',      // light red
    '–ù–î–ó': '#f4cccc',                        // light red (–Ω–µ –¥–æ–∑–≤–æ–Ω–∏–ª–∏—Å—å)

    '–í–∑—è–ª–∏ –≤ —Ä–∞–±–æ—Ç—É': '#fff2cc',            // light yellow

    '–ö–æ–Ω—Ç—Ä–æ–ª—å –æ–ø–ª–∞—Ç—ã': '#cfe2f3',           // light blue / pending
    '–ü–µ—Ä–µ–Ω–æ—Å —Å –æ—Ç–∫—Ä—ã—Ç–æ–π –¥–∞—Ç–æ–π': '#eeeeee',  // light gray
    '–ê–≤—Ç–æ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ': '#eeeeee',         // light gray (–Ω–æ–≤–∞—è, –µ—â—ë –Ω–µ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–∞)

    '–£—Å–ø–µ—à–Ω–æ –≤ –†–ü': '#d9ead3',              // light green
    '–û–ø–ª–∞—á–µ–Ω–æ': '#d9ead3',                  // light green
    '–£—Å–ø–µ—à–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ': '#d9ead3',       // light green

    '–í–æ–ø—Ä–æ—Å –∫ –±–∞—Ä—É': '#ead1dc'              // light purple
  },
  PRESERVE_STYLES: true, // –ù–µ —Ç—Ä–æ–≥–∞–µ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ª–∏—Å—Ç–æ–≤ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö

  // –°–∏–Ω–æ–Ω–∏–º—ã –∫–æ–ª–æ–Ω–æ–∫ (—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º)
  MAP: {
    // DEAL
    '–°–¥–µ–ª–∫–∞.ID': ['ID','id','–°–¥–µ–ª–∞–∫–∞.ID'],
    '–°–¥–µ–ª–∫–∞.–ù–∞–∑–≤–∞–Ω–∏–µ': ['–ù–∞–∑–≤–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏','–ù–∞–∑–≤–∞–Ω–∏–µ'],
    '–°–¥–µ–ª–∫–∞.–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π': ['–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π'],
    '–°–¥–µ–ª–∫–∞.–°—Ç–∞—Ç—É—Å': ['–≠—Ç–∞–ø —Å–¥–µ–ª–∫–∏','–°—Ç–∞—Ç—É—Å'],
    '–°–¥–µ–ª–∫–∞.–ë—é–¥–∂–µ—Ç': ['–ë—é–¥–∂–µ—Ç'],
    '–°–¥–µ–ª–∫–∞.–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è': ['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è','DATE'],
    '–°–¥–µ–ª–∫–∞.–î–∞—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∏—è': ['–î–∞—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∏—è'],
    '–°–¥–µ–ª–∫–∞.–¢–µ–≥–∏': ['–¢–µ–≥–∏ —Å–¥–µ–ª–∫–∏','–¢–µ–≥–∏'],
    '–ö–µ–º —Å–æ–∑–¥–∞–Ω–∞': ['–ê–≤—Ç–æ—Ä','–°–æ–∑–¥–∞—Ç–µ–ª—å'],

    // CONTACT
    '–ö–æ–Ω—Ç–∞–∫—Ç.–§–ò–û': ['–û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–∞–∫—Ç','–ö–æ–Ω—Ç–∞–∫—Ç.–ò–º—è','–ö–æ–Ω—Ç–∞–∫—Ç'],
    '–ö–æ–Ω—Ç–∞–∫—Ç.–¢–µ–ª–µ—Ñ–æ–Ω': ['–¢–µ–ª–µ—Ñ–æ–Ω','Phone','–†–∞–±–æ—á–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω (–∫–æ–Ω—Ç–∞–∫—Ç)'],
    '–ö–æ–Ω—Ç–∞–∫—Ç.–ù–æ–º–µ—Ä –ª–∏–Ω–∏–∏ MANGO OFFICE': ['–ù–æ–º–µ—Ä –ª–∏–Ω–∏–∏ MANGO OFFICE (–∫–æ–Ω—Ç–∞–∫—Ç)'],
    '–°–¥–µ–ª–∫–∞.–ù–æ–º–µ—Ä –ª–∏–Ω–∏–∏ MANGO OFFICE': ['–ù–æ–º–µ—Ä –ª–∏–Ω–∏–∏ MANGO OFFICE'],

    // RESERVATION
    '–°–¥–µ–ª–∫–∞.–ë–∞—Ä (deal)': ['–ë–∞—Ä (deal)'],
    '–°–¥–µ–ª–∫–∞.–î–∞—Ç–∞ –±—Ä–æ–Ω–∏': ['–î–∞—Ç–∞ –±—Ä–æ–Ω–∏','–ë—Ä–æ–Ω—å.–î–∞—Ç–∞'],
    '–°–¥–µ–ª–∫–∞.–í—Ä–µ–º—è –ø—Ä–∏—Ö–æ–¥–∞': ['–í—Ä–µ–º—è –ø—Ä–∏—Ö–æ–¥–∞'],
    '–°–¥–µ–ª–∫–∞.–ö–æ–ª-–≤–æ –≥–æ—Å—Ç–µ–π': ['–ö–æ–ª-–≤–æ –≥–æ—Å—Ç–µ–π'],
    '–°–¥–µ–ª–∫–∞.–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ú–û–ë': ['–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ú–û–ë'],
    '–°–¥–µ–ª–∫–∞.R.–°—Ç–∞—Ç—É—Å—ã –≥–æ—Å—Ç–µ–π': ['R.–°—Ç–∞—Ç—É—Å—ã –≥–æ—Å—Ç–µ–π'],

    // UTM / SOURCE
    '–°–¥–µ–ª–∫–∞.UTM_SOURCE': ['UTM_SOURCE','utm_source'],
    '–°–¥–µ–ª–∫–∞.UTM_MEDIUM': ['UTM_MEDIUM','utm_medium'],
    '–°–¥–µ–ª–∫–∞.UTM_CAMPAIGN': ['UTM_CAMPAIGN','utm_campaign'],
    '–°–¥–µ–ª–∫–∞.UTM_CONTENT': ['UTM_CONTENT','utm_content'],
    '–°–¥–µ–ª–∫–∞.UTM_TERM': ['UTM_TERM','utm_term'],
    '–°–¥–µ–ª–∫–∞.utm_referrer': ['utm_referrer','referer','REFERRER','REFERER'],
    '–°–¥–µ–ª–∫–∞.–ò—Å—Ç–æ—á–Ω–∏–∫': ['–ò—Å—Ç–æ—á–Ω–∏–∫','Source'],
    '–°–¥–µ–ª–∫–∞.R.–ò—Å—Ç–æ—á–Ω–∏–∫ —Å–¥–µ–ª–∫–∏': ['R.–ò—Å—Ç–æ—á–Ω–∏–∫ —Å–¥–µ–ª–∫–∏'],
    '–°–¥–µ–ª–∫–∞.–¢–∏–ø –ª–∏–¥–∞': ['–¢–∏–ø –ª–∏–¥–∞'],

    // ANALYTICS
    '–°–¥–µ–ª–∫–∞.YM_CLIENT_ID': ['YM_CLIENT_ID'],
    '–°–¥–µ–ª–∫–∞._ym_uid': ['_ym_uid'],
    '–°–¥–µ–ª–∫–∞.GA_CLIENT_ID': ['GA_CLIENT_ID'],
    '–°–¥–µ–ª–∫–∞.FORMID': ['FORMID'],
    '–°–¥–µ–ª–∫–∞.FORMNAME': ['FORMNAME'],
    '–°–¥–µ–ª–∫–∞.BUTTON_TEXT': ['BUTTON_TEXT'],
    '–°–¥–µ–ª–∫–∞.DATE': ['DATE'],
    '–°–¥–µ–ª–∫–∞.TIME': ['TIME'],
    '–°–¥–µ–ª–∫–∞.REFERER': ['REFERER'],

    // ADDITIONAL
    '–°–¥–µ–ª–∫–∞.R.–¢–µ–≥ –≥–æ—Ä–æ–¥–∞': ['R.–¢–µ–≥ –≥–æ—Ä–æ–¥–∞'],
    '–°–¥–µ–ª–∫–∞.–ü–û': ['–ü–û'],
    '–°–¥–µ–ª–∫–∞.–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞ (–û–ë)': ['–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞ (–û–ë)'],
    '–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1': ['–°–¥–µ–ª–∫–∞.–ü—Ä–∏–º–µ—á–∞–Ω–∏—è(—á–µ—Ä–µ–∑ ;)','–ü—Ä–∏–º–µ—á–∞–Ω–∏—è(—á–µ—Ä–µ–∑ ;)'],
    '–°–≤—è–∑–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏': [],
    '–û–±—ä–µ–¥–∏–Ω–µ–Ω–æ': [],

    // SITE (–ª–∏—Å—Ç "–ó–∞—è–≤–∫–∏ —Å –°–∞–π—Ç–∞")
    'Site.Name': ['Name','–ò–º—è'],
    'Site.Phone': ['Phone','–¢–µ–ª–µ—Ñ–æ–Ω'],
    'Site.Email': ['Email','E-mail'],
    'Site.Date': ['Date','–î–∞—Ç–∞'],
    'Site.Time': ['Time','–í—Ä–µ–º—è'],
    'Site.Quantity': ['Quantity','–ö–æ–ª-–≤–æ'],
    'Site.Form name': ['Form name','–§–æ—Ä–º–∞'],
    'Site.utm_source': ['utm_source'],
    'Site.utm_medium': ['utm_medium'],
    'Site.utm_campaign': ['utm_campaign'],
    'Site.referer': ['referer','utm_referrer'],
    'Site.button_text': ['button_text','BUTTON_TEXT'],

    // RESERVES RP
    'Res.Name': ['–ò–º—è'],
    'Res.Phone': ['–¢–µ–ª–µ—Ñ–æ–Ω','Phone'],
    'Res.Email': ['Email'],
    'Res.Datetime': ['–î–∞—Ç–∞/–≤—Ä–µ–º—è','–î–∞—Ç–∞','Datetime'],
    'Res.Amount': ['–°—á—ë—Ç, ‚ÇΩ','–°—á–µ—Ç, ‚ÇΩ','–°—É–º–º–∞','Amount'],
    'Res.Guests': ['–ì–æ—Å—Ç–µ–π','–ö–æ–ª-–≤–æ –≥–æ—Å—Ç–µ–π'],
    'Res.Source': ['–ò—Å—Ç–æ—á–Ω–∏–∫','Source'],

    // GUESTS RP
    'Guests.Name': ['–ò–º—è','Name'],
    'Guests.Phone': ['–¢–µ–ª–µ—Ñ–æ–Ω','Phone'],
    'Guests.Email': ['Email'],
    'Guests.Visits': ['–ö–æ–ª-–≤–æ –≤–∏–∑–∏—Ç–æ–≤','VISITS_COUNT'],
    'Guests.Total': ['–û–±—â–∞—è —Å—É–º–º–∞','TOTAL_AMOUNT','–°—É–º–º–∞'],
    'Guests.FirstVisit': ['–ü–µ—Ä–≤—ã–π –≤–∏–∑–∏—Ç','FIRST_VISIT'],
    'Guests.LastVisit': ['–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–∏–∑–∏—Ç','LAST_VISIT']
  },

  // –°–µ–∫—Ü–∏–∏ ‚Äî –ø–æ—Ä—è–¥–æ–∫ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
  SECTIONS: [
    { title:'üìù –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–î–ï–õ–ö–ï', cols: [
      '–°–¥–µ–ª–∫–∞.ID','–°–¥–µ–ª–∫–∞.–ù–∞–∑–≤–∞–Ω–∏–µ','–°–¥–µ–ª–∫–∞.–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π','–°–¥–µ–ª–∫–∞.–°—Ç–∞—Ç—É—Å',
      '–°–¥–µ–ª–∫–∞.–ë—é–¥–∂–µ—Ç','–°–¥–µ–ª–∫–∞.–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è','–°–¥–µ–ª–∫–∞.–¢–µ–≥–∏','–°–¥–µ–ª–∫–∞.–î–∞—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∏—è'
    ]},
    { title:'üë§ –ö–û–ù–¢–ê–ö–¢', cols: [
      '–ö–æ–Ω—Ç–∞–∫—Ç.–§–ò–û','–ö–æ–Ω—Ç–∞–∫—Ç.–¢–µ–ª–µ—Ñ–æ–Ω','–ö–æ–Ω—Ç–∞–∫—Ç.–ù–æ–º–µ—Ä –ª–∏–Ω–∏–∏ MANGO OFFICE','–°–¥–µ–ª–∫–∞.–ù–æ–º–µ—Ä –ª–∏–Ω–∏–∏ MANGO OFFICE'
    ]},
    { title:'üïí –ë–†–û–ù–¨', cols: [
      '–°–¥–µ–ª–∫–∞.–ë–∞—Ä (deal)','–°–¥–µ–ª–∫–∞.–î–∞—Ç–∞ –±—Ä–æ–Ω–∏','–°–¥–µ–ª–∫–∞.–í—Ä–µ–º—è –ø—Ä–∏—Ö–æ–¥–∞','–°–¥–µ–ª–∫–∞.–ö–æ–ª-–≤–æ –≥–æ—Å—Ç–µ–π',
      '–°–¥–µ–ª–∫–∞.–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ú–û–ë','–°–¥–µ–ª–∫–∞.R.–°—Ç–∞—Ç—É—Å—ã –≥–æ—Å—Ç–µ–π'
    ]},
    { title:'üìä UTM/–ò–°–¢–û–ß–ù–ò–ö', cols: [
      '–°–¥–µ–ª–∫–∞.–ò—Å—Ç–æ—á–Ω–∏–∫','–°–¥–µ–ª–∫–∞.–¢–∏–ø –ª–∏–¥–∞','–°–¥–µ–ª–∫–∞.R.–ò—Å—Ç–æ—á–Ω–∏–∫ —Å–¥–µ–ª–∫–∏',
      '–°–¥–µ–ª–∫–∞.R.–ò—Å—Ç–æ—á–Ω–∏–∫ –¢–ï–õ —Å–¥–µ–ª–∫–∏',
      '–°–¥–µ–ª–∫–∞.UTM_SOURCE','–°–¥–µ–ª–∫–∞.UTM_MEDIUM','–°–¥–µ–ª–∫–∞.UTM_CAMPAIGN',
      '–°–¥–µ–ª–∫–∞.UTM_TERM','–°–¥–µ–ª–∫–∞.UTM_CONTENT','–°–¥–µ–ª–∫–∞.utm_referrer'
    ]},
    { title:'üîç –ê–ù–ê–õ–ò–¢–ò–ö–ê', cols: [
      '–°–¥–µ–ª–∫–∞.YM_CLIENT_ID','–°–¥–µ–ª–∫–∞.GA_CLIENT_ID','–°–¥–µ–ª–∫–∞.FORMNAME','–°–¥–µ–ª–∫–∞.REFERER',
      '–°–¥–µ–ª–∫–∞.FORMID','–°–¥–µ–ª–∫–∞.DATE','–°–¥–µ–ª–∫–∞.TIME','–°–¥–µ–ª–∫–∞.BUTTON_TEXT'
    ]},
    { title:'üìå –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û', cols: [
      '–°–¥–µ–ª–∫–∞.R.–¢–µ–≥ –≥–æ—Ä–æ–¥–∞','–°–¥–µ–ª–∫–∞.–ü–û','–°–¥–µ–ª–∫–∞.–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞ (–û–ë)','–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1','–°–≤—è–∑–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏','–û–±—ä–µ–¥–∏–Ω–µ–Ω–æ'
    ]},
    { title:'üü¶ SITE/RESERVES/GUESTS (–æ–±–æ–≥–∞—â–µ–Ω–∏–µ)', cols: [
      'Site.–ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞—è–≤–∫–∞','Site.utm_source','Site.utm_medium','Site.utm_campaign',
      '–°–¥–µ–ª–∫–∞.R.–ò—Å—Ç–æ—á–Ω–∏–∫ –¢–ï–õ —Å–¥–µ–ª–∫–∏',
      'RP.–í–∏–∑–∏—Ç–æ–≤','RP.–°—É–º–º–∞ ‚ÇΩ','RP.–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–∏–∑–∏—Ç',
      'Guests.–í–∏–∑–∏—Ç–æ–≤','Guests.–°—É–º–º–∞ ‚ÇΩ','Guests.–ü–µ—Ä–≤—ã–π –≤–∏–∑–∏—Ç','Guests.–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–∏–∑–∏—Ç'
    ]},
    { title:'üßÆ –ê–í–¢–û-–ü–û–õ–Ø', cols: ['–í–æ–∑—Ä–∞—Å—Ç —Å–¥–µ–ª–∫–∏ (–¥–Ω.)','–î–Ω–µ–π –¥–æ –±—Ä–æ–Ω–∏'] }
  ]
};
/************ –ö–û–ù–ï–¶ –ö–û–ù–§–ò–ì–ê ************/


/** ===== –ü–£–ë–õ–ò–ß–ù–´–ï –¢–û–ß–ö–ò –ó–ê–ü–£–°–ö–ê ===== **/
function buildWorkingFromFive() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();

  // 1) –ò—Å—Ç–æ—á–Ω–∏–∫–∏
  const tNew0  = readTable(ss, CFG.SHEETS.NEW);
  const tFull0 = readTable(ss, CFG.SHEETS.FULL);
  const tSite  = readTable(ss, CFG.SHEETS.SITE);
  const tRes   = readTable(ss, CFG.SHEETS.RES);
  const tGue   = readTable(ss, CFG.SHEETS.GUE);
  const tCall  = readTable(ss, CFG.SHEETS.CALL);

  // –ö–∞–Ω–æ–Ω–∏–∑–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å–¥–µ–ª–æ–∫ –ø–æ —Å–ª–æ–≤–∞—Ä—é CFG.MAP,
  // —á—Ç–æ–±—ã –ø–æ–ª—è –≤—Ä–æ–¥–µ "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è" ‚Üí "–°–¥–µ–ª–∫–∞.–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è",
  // "–ë—Ä–æ–Ω—å.–î–∞—Ç–∞" ‚Üí "–°–¥–µ–ª–∫–∞.–î–∞—Ç–∞ –±—Ä–æ–Ω–∏" –∏ —Ç.–ø. –Ω–µ —Ç–µ—Ä—è–ª–∏—Å—å –ø—Ä–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏.
  const tNew  = canonicalizeTable(tNew0);
  const tFull = canonicalizeTable(tFull0);

  // 2) –ó–∞–≥–æ–ª–æ–≤–æ–∫: NEW + –¥–æ–±–∞–≤–∫–∏ –∏–∑ FULL
  const unionDealHeader = makeUnionHeader(tNew.header, tFull.header);

  // 3) –°–ª–æ–≤–∞—Ä—å ID ‚Üí –∑–∞–ø–∏—Å—å (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç NEW)
  const idIdxNew = unionDealHeader.indexOf('–°–¥–µ–ª–∫–∞.ID');
  if (idIdxNew === -1) throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω–∞ "–°–¥–µ–ª–∫–∞.ID"');

  const mappedFull = normalizeRowsToHeader(unionDealHeader, tFull.header, tFull.rows);
  const mappedNew  = normalizeRowsToHeader(unionDealHeader, tNew.header,  tNew.rows);

  const dict = {};
  mappedFull.forEach(row => { const id = String(row[idIdxNew]||'').trim(); if (id) dict[id]=row; });
  mappedNew.forEach(row  => { const id = String(row[idIdxNew]||'').trim(); if (id) dict[id]=row; });

  // 4) –û–±–æ–≥–∞—â–µ–Ω–∏–µ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
  const siteAgg = aggregateSiteByPhone(tSite);
  const resAgg  = aggregateResByPhone(tRes);
  const gueAgg  = aggregateGuestsByPhone(tGue);

  const createdKey = chooseDateKey(unionDealHeader);
  const bookingIdx = indexOfAny(unionDealHeader, ['–°–¥–µ–ª–∫–∞.–î–∞—Ç–∞ –±—Ä–æ–Ω–∏','–ë—Ä–æ–Ω—å.–î–∞—Ç–∞']);
  const phoneIdx = indexOfAny(unionDealHeader, ['–ö–æ–Ω—Ç–∞–∫—Ç.–¢–µ–ª–µ—Ñ–æ–Ω','–¢–µ–ª–µ—Ñ–æ–Ω','Phone']);
  const iMangoContact = indexOfAny(unionDealHeader, ['–ö–æ–Ω—Ç–∞–∫—Ç.–ù–æ–º–µ—Ä –ª–∏–Ω–∏–∏ MANGO OFFICE']);
  const iMangoDeal    = indexOfAny(unionDealHeader, ['–°–¥–µ–ª–∫–∞.–ù–æ–º–µ—Ä –ª–∏–Ω–∏–∏ MANGO OFFICE']);
  const ctMap = buildCalltrackingMap(tCall);

  // 5) –•–≤–æ—Å—Ç—ã enrichment + –∞–≤—Ç–æ
  const enrichCols = [
    'Site.–ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞—è–≤–∫–∞','Site.utm_source','Site.utm_medium','Site.utm_campaign',
    '–°–¥–µ–ª–∫–∞.R.–ò—Å—Ç–æ—á–Ω–∏–∫ –¢–ï–õ —Å–¥–µ–ª–∫–∏',
    'RP.–í–∏–∑–∏—Ç–æ–≤','RP.–°—É–º–º–∞ ‚ÇΩ','RP.–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–∏–∑–∏—Ç',
    'Guests.–í–∏–∑–∏—Ç–æ–≤','Guests.–°—É–º–º–∞ ‚ÇΩ','Guests.–ü–µ—Ä–≤—ã–π –≤–∏–∑–∏—Ç','Guests.–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–∏–∑–∏—Ç'
  ];
  const autoCols = ['–í–æ–∑—Ä–∞—Å—Ç —Å–¥–µ–ª–∫–∏ (–¥–Ω.)','–î–Ω–µ–π –¥–æ –±—Ä–æ–Ω–∏'];
  const finalHeader = [...unionDealHeader, ...enrichCols, ...autoCols];

  // 6) –°—Ç—Ä–æ–∏–º —Å—Ç—Ä–æ–∫–∏ (–ø–æ–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ finalHeader)
  const records = Object.values(dict);
  records.sort((a,b) => toTs(a[unionDealHeader.indexOf(createdKey)]) < toTs(b[unionDealHeader.indexOf(createdKey)]) ? 1 : -1);

  const iStatus = unionDealHeader.indexOf('–°–¥–µ–ª–∫–∞.–°—Ç–∞—Ç—É—Å');

  const rowsRaw = records.map(row => {
    const out = [...row];

    // –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞
    if (iStatus > -1) out[iStatus] = normalizeStatus(out[iStatus]);

    // —Ç–µ–ª–µ—Ñ–æ–Ω
    const phoneRaw = (phoneIdx>-1 ? row[phoneIdx] : '');
    const phone = firstCleanPhone(phoneRaw);

    // SITE
    const s = phone ? siteAgg.get(phone) : null;
    out.push(s?.lastDate || '');
    out.push(s?.utm_source || '');
    out.push(s?.utm_medium || '');
    out.push(s?.utm_campaign || '');
    // CT TAG by Mango line (–ö–æ–Ω—Ç–∞–∫—Ç/–°–¥–µ–ª–∫–∞)
    const mangoC = (iMangoContact > -1 ? row[iMangoContact] : '');
    const mangoD = (iMangoDeal    > -1 ? row[iMangoDeal]    : '');
    const ctTag  = findCalltrackingTag(ctMap, mangoC, mangoD);
    out.push(ctTag);

    // RESERVES
    const r = phone ? resAgg.get(phone) : null;
    out.push(r?.visits || 0);
    out.push(r?.amount || 0);
    out.push(r?.lastVisit || '');

    // GUESTS
    const g = phone ? gueAgg.get(phone) : null;
    out.push(g?.visits || 0);
    out.push(g?.total || 0);
    out.push(g?.firstVisit || '');
    out.push(g?.lastVisit || '');

    // AUTO
    const createdVal = createdKey ? row[unionDealHeader.indexOf(createdKey)] : '';
    const age = createdVal ? daysBetween(createdVal, new Date()) : '';
    const bookingVal = (bookingIdx>-1) ? row[bookingIdx] : '';
    const daysTo = bookingVal ? daysBetween(new Date(), bookingVal) * -1 : '';
    out.push(age);
    out.push(daysTo);

    return out;
  });

  // 7) –ü–µ—Ä–µ—É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ —Å—Ç—Ä–æ–≥–æ –ø–æ–¥ —Å–µ–∫—Ü–∏–∏
  const orderInfo = computeOrder(finalHeader, CFG.SECTIONS); // {order, spans}
  const headerOrderedRaw = orderInfo.order.map(i => finalHeader[i]);
  const rows = rowsRaw.map(r => orderInfo.order.map(i => r[i]));

  // 7-) –ü–µ—Ä–µ—Å—á—ë—Ç ¬´R.–ò—Å—Ç–æ—á–Ω–∏–∫ –¢–ï–õ —Å–¥–µ–ª–∫–∏¬ª —Å—Ç—Ä–æ–≥–æ –ø–æ –Ω–æ–º–µ—Ä–∞–º –∏–∑ –∫–æ–ª–æ–Ω–æ–∫
  // –ß–∏—Ç–∞–µ–º –Ω–æ–º–µ—Ä–∞ –∏–∑ —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞ (—Ç–æ—á–Ω—ã–µ –∏–º–µ–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫, –±–µ–∑ humanize)
  (function enforceCtTagByOrderedColumns(){
    const iMangoC2 = headerOrderedRaw.indexOf('–ö–æ–Ω—Ç–∞–∫—Ç.–ù–æ–º–µ—Ä –ª–∏–Ω–∏–∏ MANGO OFFICE');
    const iMangoD2 = headerOrderedRaw.indexOf('–°–¥–µ–ª–∫–∞.–ù–æ–º–µ—Ä –ª–∏–Ω–∏–∏ MANGO OFFICE');
    const iCtOut2  = headerOrderedRaw.indexOf('–°–¥–µ–ª–∫–∞.R.–ò—Å—Ç–æ—á–Ω–∏–∫ –¢–ï–õ —Å–¥–µ–ª–∫–∏');
    if (iCtOut2 === -1) return; // –Ω–µ—Ç —Ü–µ–ª–µ–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏ ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Ä—Ç—É calltracking (–Ω–æ–º–µ—Ä -> —Ç–µ–≥), —Å–æ–±—Ä–∞–Ω–Ω—É—é –≤—ã—à–µ
    rows.forEach((r)=>{
      const tag = findCalltrackingTag(ctMap, r[iMangoC2], r[iMangoD2]);
      r[iCtOut2] = tag || '';
    });
  })();

  // 8) –ß–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ (–°–¥–µ–ª–∫–∞./Site./Guests./‚Ä¶)
  const displayHeader = headerOrderedRaw.map(humanizeHeader);

  // 9) –†–µ–Ω–¥–µ—Ä –≤ –†–ê–ë–û–ß–ò–ô –ê–ú–û
  const sh = ss.getSheetByName(CFG.SHEETS.OUT) || ss.insertSheet(CFG.SHEETS.OUT);
  if (CFG.PRESERVE_STYLES) {
    // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∏ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ (–Ω–∞–∑–≤–∞–Ω–∏—è –±–ª–æ–∫–æ–≤)
    const maxR = sh.getMaxRows();
    const maxC = sh.getMaxColumns();
    if (maxR > 1 && maxC > 0) sh.getRange(2, 1, maxR - 1, maxC).clearContent();
  } else {
    sh.clear();
  }

  // –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä —Å–µ—Ç–∫–∏ –ø–æ–¥ —à–∞–ø–∫—É –∏ –¥–∞–Ω–Ω—ã–µ
  ensureGrid(sh, (rows.length || 0) + 2, displayHeader.length);

  // ‚Äî —Å—Ç—Ä–æ–∫–∞ 1 (—Å–µ–∫—Ü–∏–∏) + —Å—Ç—Ä–æ–∫–∞ 2 (—á–µ–ª–æ–≤–µ—á–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏)
  if (!CFG.PRESERVE_STYLES) {
    drawSectionTitlesBySpans(sh, orderInfo.spans);
    {
      const headerRange = sh.getRange(2,1,1,displayHeader.length);
      // –ù–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ª–∏—Å—Ç–∞—Ö –Ω–∞ –≤—Å—é –∫–æ–ª–æ–Ω–∫—É –Ω–∞–≤–µ—à–∞–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö,
      // –∏–∑‚Äë–∑–∞ —á–µ–≥–æ –∑–∞–ø–∏—Å—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ –≤ —Å—Ç—Ä–æ–∫—É 2 –ø–∞–¥–∞–µ—Ç —Å –æ—à–∏–±–∫–æ–π.
      // –ß–∏—Å—Ç–∏–º validation —Ç–æ–ª—å–∫–æ –Ω–∞ —Å—Ç—Ä–æ–∫–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤, —Å—Ç–∏–ª–∏ –Ω–µ —Ç—Ä–æ–≥–∞–µ–º.
      headerRange.clearDataValidations();
      headerRange.setValues([displayHeader]).setFontWeight('bold');
    }
    sh.setFrozenRows(2);

    // ‚Äî —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å—Ç—Ä–æ–∫–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    const oldFilter = (typeof sh.getFilter === 'function') ? sh.getFilter() : null;
    if (oldFilter) oldFilter.remove();
    sh.getRange(2,1,1,displayHeader.length).createFilter();
  } else {
    // —Ç–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—à–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–º –Ω–∞–∑–≤–∞–Ω–∏—è —Å–µ–∫—Ü–∏–π –≤ —Å—Ç—Ä–æ–∫–µ 1
    drawSectionTitlesPreserve(sh, orderInfo.spans);
    {
      const headerRange = sh.getRange(2,1,1,displayHeader.length);
      // –°–Ω–∏–º–µ–º validation —Ç–æ–ª—å–∫–æ –Ω–∞ —Å—Ç—Ä–æ–∫–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤, —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞–ª–æ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –∫–æ–ª–æ–Ω–∫–∞—Ö
      headerRange.clearDataValidations();
      headerRange.setValues([displayHeader]);
    }
  }

  // ‚Äî –¥–∞–Ω–Ω—ã–µ
  if (rows.length) {
    sh.getRange(3,1,rows.length,displayHeader.length).setValues(rows);
  }

  // Format TIME column as time-only (hh:mm) regardless of PRESERVE_STYLES
  (function ensureTimeFormat(){
    const timeColIdx = displayHeader.indexOf('TIME');
    if (timeColIdx > -1 && rows.length) {
      sh.getRange(3, timeColIdx + 1, rows.length, 1).setNumberFormat('hh:mm');
    }
  })();

  // –í—Å–µ–≥–¥–∞ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –ø–µ—Ä–µ–∫—Ä–∞—à–∏–≤–∞–µ–º –¢–û–õ–¨–ö–û –∫–æ–ª–æ–Ω–∫—É "–°—Ç–∞—Ç—É—Å" –ø–æ —Ç–µ–∫—Å—Ç—É
  paintStatusColumn(sh, displayHeader, rows);

  if (!CFG.PRESERVE_STYLES) {
    // ‚Äî –≥—Ä–∞–Ω–∏—Ü—ã —Å–µ–∫—Ü–∏–π (–ø–æ —Ç–æ—á–Ω—ã–º span‚Äô–∞–º)
    drawSectionBordersBySpans(sh, orderInfo.spans, rows.length + 2);

    // ‚Äî –ø–æ–¥—Å–≤–µ—Ç–∫–∞ –¢–û–õ–¨–ö–û –∫–æ–ª–æ–Ω–∫–∏ ID (–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ ‚Äî —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç–∏–ª–∏ –º–æ–∂–Ω–æ —Ç—Ä–æ–≥–∞—Ç—å)
    colorByRules(sh, displayHeader, rows);
  }

  // –í—Å–µ–≥–¥–∞ —Å–æ–∑–¥–∞—ë–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ª–∏—Å—Ç—ã ¬´–ù–û–í–´–ï¬ª –∏ ¬´–ü–†–û–ë–õ–ï–ú–ù–´–ï¬ª –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç PRESERVE_STYLES
  makeSubsets(ss, displayHeader, rows);

  logAppend(ss, `–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${rows.length} —Å—Ç—Ä–æ–∫`);
}

function diagnoseWorkbook5() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const diag = ss.getSheetByName(CFG.SHEETS.DIAG) || ss.insertSheet(CFG.SHEETS.DIAG);
  diag.clear(); let r = 1;

  const names = [CFG.SHEETS.NEW, CFG.SHEETS.FULL, CFG.SHEETS.SITE, CFG.SHEETS.RES, CFG.SHEETS.GUE];
  diag.getRange(r++,1).setValue('–õ–∏—Å—Ç—ã –≤ –∫–Ω–∏–≥–µ:'); 
  diag.getRange(r,1,names.length,1).setValues(names.map(n=>[n])); r+=names.length+1;

  const meta = {};
  names.forEach(n => { meta[n] = dumpSheetMeta(ss, diag, n, r); r = meta[n].nextRow; });

  r++;
  diag.getRange(r++,1).setValue('==== –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ (–ê–º–æ –í—ã–≥—Ä—É–∑–∫–∞ vs –í—ã–≥—Ä—É–∑–∫–∞ –ê–º–æ –ü–æ–ª–Ω–∞—è) ====');
  r = compareHeaders(diag, r, meta[CFG.SHEETS.NEW].header, meta[CFG.SHEETS.FULL].header);

  const inv = buildInverseMap(CFG.MAP);
  const deals = readTable(ss, CFG.SHEETS.NEW);
  const phoneIdxDeals = findIndexBySynonyms(inv, deals.header, ['–ö–æ–Ω—Ç–∞–∫—Ç.–¢–µ–ª–µ—Ñ–æ–Ω']);
  const phonesDeals = collectPhones(deals.rows, phoneIdxDeals);

  const site = readTable(ss, CFG.SHEETS.SITE);
  const res  = readTable(ss, CFG.SHEETS.RES);
  const gue  = readTable(ss, CFG.SHEETS.GUE);

  const siteAgg = aggregateSiteByPhone(site);
  const resAgg  = aggregateResByPhone(res);
  const gueAgg  = aggregateGuestsByPhone(gue);

  const matchStats = calcMatchStats(phonesDeals, {siteAgg, resAgg, gueAgg});

  r++;
  diag.getRange(r++,1).setValue('==== –ü–æ–∫—Ä—ã—Ç–∏–µ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É (–∏–∑ "–ê–º–æ –í—ã–≥—Ä—É–∑–∫–∞") ====');
  diag.getRange(r++,1).setValue(`–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫ —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º: ${matchStats.totalWithPhone}`);
  diag.getRange(r++,1).setValue(`–ï—Å—Ç—å –≤ "–ó–∞—è–≤–∫–∏ —Å –°–∞–π—Ç–∞": ${matchStats.site}%`);
  diag.getRange(r++,1).setValue(`–ï—Å—Ç—å –≤ "Reserves RP": ${matchStats.res}%`);
  diag.getRange(r++,1).setValue(`–ï—Å—Ç—å –≤ "Guests RP": ${matchStats.gue}%`);
  diag.autoResizeColumns(1, diag.getMaxColumns());
}

/** ===== –¢–†–ò–ì–ì–ï–† ===== **/
function setHourlyTrigger(){
  ScriptApp.getProjectTriggers().forEach(t=>{
    if (t.getHandlerFunction()==='buildWorkingFromFive') ScriptApp.deleteTrigger(t);
  });
  ScriptApp.newTrigger('buildWorkingFromFive').timeBased().everyHours(1).create();
}

/** ===== –£–¢–ò–õ–ò–¢–´ –ß–¢–ï–ù–ò–Ø/–ó–ê–ü–ò–°–ò ===== **/
function dumpSheetMeta(ss, out, name, row){
  const sh = ss.getSheetByName(name);
  if (!sh){ out.getRange(row++,1).setValue(`‚ö† –ù–µ—Ç –ª–∏—Å—Ç–∞: ${name}`); return {header:[],rows:[],nextRow:row}; }
  const v = sh.getDataRange().getValues();
  const header = (v[0]||[]).map(String);
  const data = v.slice(1).filter(r => r.some(x => String(x).trim()!==''));
  out.getRange(row++,1).setValue(`–õ–∏—Å—Ç: ${name}`);
  out.getRange(row++,1).setValue(`–°—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö: ${data.length}, –ö–æ–ª–æ–Ω–æ–∫: ${header.length}`);
  if (header.length){ out.getRange(row,1,1,header.length).setValues([header]); row++; }
  const sample = data.slice(0,3);
  if (sample.length){ out.getRange(row,1,sample.length,Math.max(header.length,sample[0].length)).setValues(sample); row+=sample.length; }
  row++;
  return {header,rows:data,nextRow:row};
}
function compareHeaders(sh, row, a, b){
  const setA = new Set(a), setB = new Set(b);
  const onlyB = [...setB].filter(h => !setA.has(h)).sort();
  const onlyA = [...setA].filter(h => !setB.has(h)).sort();
  sh.getRange(row++,1).setValue('–¢–æ–ª—å–∫–æ –≤ "–í—ã–≥—Ä—É–∑–∫–∞ –ê–º–æ –ü–æ–ª–Ω–∞—è":');
  if (onlyB.length) { sh.getRange(row,1,onlyB.length,1).setValues(onlyB.map(h=>[h])); row+=onlyB.length; } else row++;
  sh.getRange(row++,1).setValue('–¢–æ–ª—å–∫–æ –≤ "–ê–º–æ –í—ã–≥—Ä—É–∑–∫–∞":');
  if (onlyA.length) { sh.getRange(row,1,onlyA.length,1).setValues(onlyA.map(h=>[h])); row+=onlyA.length; } else row++;
  return row;
}
function readTable(ss, name){
  const sh = ss.getSheetByName(name);
  if (!sh) return {header:[],rows:[]};
  const v = sh.getDataRange().getValues();
  const header = (v[0]||[]).map(String);
  const rows = v.slice(1).filter(r=>r.some(x=>String(x).trim()!==''));
  return {header, rows};
}
function makeUnionHeader(prio, other){ const set = new Set(prio); other.forEach(h => set.add(h)); return [...set]; }
function normalizeRowsToHeader(targetHeader, srcHeader, rows){
  const idx = {}; srcHeader.forEach((h,i)=>idx[h]=i);
  return rows.map(r => targetHeader.map(h => idx[h]!=null ? r[idx[h]] : ''));
}
function buildInverseMap(map){
  const inv={};
  Object.keys(map).forEach(canon=>{
    (map[canon]||[]).forEach(a => inv[normalizeHeader(a)] = canon);
    inv[normalizeHeader(canon)] = canon;
  });
  return inv;
}
function normalizeHeader(h){ return String(h||'').trim().toLowerCase(); }
function findIndexBySynonyms(inv, header, canonNames){
  const norm = header.map(normalizeHeader);
  for (const name of canonNames){
    const canon = buildInverseMap({[name]: CFG.MAP[name]||[]});
    for (let i=0;i<header.length;i++){
      const h = header[i];
      const mapped = canon[normalizeHeader(h)];
      if (mapped) return i;
    }
  }
  return -1;
}
function indexOfAny(header, names){ 
  const inv = buildInverseMap(CFG.MAP);
  const normH = header.map(normalizeHeader);
  for (const nm of names){
    const canon = inv[normalizeHeader(nm)] || nm;
    for (let i=0;i<header.length;i++){
      const mapped = inv[normH[i]] || header[i];
      if (mapped === canon) return i;
    }
  }
  return -1;
}

function canonicalizeTable(table){
  if (!table || !Array.isArray(table.header)) return table;
  const inv = buildInverseMap(CFG.MAP);
  const seen = new Set();
  const canonHeader = table.header.map(h => {
    const mapped = inv[normalizeHeader(h)] || h; // –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ –∫–∞–Ω–æ–Ω, –µ—Å–ª–∏ –µ—Å—Ç—å
    // –µ—Å–ª–∏ —Ç–∞–∫–æ–π –∫–∞–Ω–æ–Ω —É–∂–µ –≤—Å—Ç—Ä–µ—á–∞–ª—Å—è (–¥—É–±–ª–∏–∫–∞—Ç—ã –∫–æ–ª–æ–Ω–æ–∫) ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–º—è, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –¥–∞–Ω–Ω—ã–µ
    if (seen.has(mapped)) return h;
    seen.add(mapped);
    return mapped;
  });
  return { header: canonHeader, rows: table.rows };
}

/** ---- –¢–µ–ª–µ—Ñ–æ–Ω—ã –∏ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ ---- **/
// === –ö–æ–ª–ª—Ç—Ä–µ–∫–∏–Ω–≥: –∫–∞—Ä—Ç–∞ –Ω–æ–º–µ—Ä -> —Ç–µ–≥ ===
function buildCalltrackingMap(t){
  const map = new Map();
  if (!t || !t.rows || !t.rows.length) return map;

  // –û–∂–∏–¥–∞–µ–º —è–≤–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–∞ –ª–∏—Å—Ç–µ ¬´–ö–æ–ª–ª–¢—Ä–µ–∫–∏–Ω–≥¬ª
  // A ‚Äî –ö–æ–Ω—Ç–∞–∫—Ç.–ù–æ–º–µ—Ä –ª–∏–Ω–∏–∏ MANGO OFFICE
  // B ‚Äî R.–ò—Å—Ç–æ—á–Ω–∏–∫ –¢–ï–õ —Å–¥–µ–ª–∫–∏
  const header = Array.isArray(t.header) ? t.header : [];
  const hnorm = header.map(h => String(h || '').trim().toLowerCase());
  let iNumber = hnorm.indexOf('–∫–æ–Ω—Ç–∞–∫—Ç.–Ω–æ–º–µ—Ä –ª–∏–Ω–∏–∏ mango office');
  let iTag    = hnorm.indexOf('r.–∏—Å—Ç–æ—á–Ω–∏–∫ —Ç–µ–ª —Å–¥–µ–ª–∫–∏');

  // –§–æ–ª–±—ç–∫–∏: –µ—Å–ª–∏ —à–∞–ø–∫–∏ –Ω–µ—Ç ‚Äî A=–Ω–æ–º–µ—Ä, B=—Ç–µ–≥
  if (iNumber === -1) iNumber = 0;
  if (iTag === -1)    iTag    = (header.length >= 2 ? 1 : 0);

  t.rows.forEach(r => {
    const num = cleanPhoneDigits(r[iNumber]);
    const raw = String(r[iTag] || '').trim();
    if (!num || !raw) return;

    const tag = normalizeCtTag(raw); // —Ç–æ–ª—å–∫–æ osn_tel/ya_tel/rclub_tel/2gis_tel/smm_tel (+ osn -> osn_tel)
    if (tag) map.set(num, tag);
  });

  return map;
}

function normalizeCtTag(src){
  const s = String(src || '').trim().toLowerCase();
  if (s === 'osn') return 'osn_tel';
  const allowed = ['osn_tel','ya_tel','rclub_tel','2gis_tel','smm_tel'];
  return allowed.includes(s) ? s : '';
}

// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–≥ –ø–æ –Ω–æ–º–µ—Ä—É –ª–∏–Ω–∏–∏ Mango (–∫–æ–Ω—Ç–∞–∫—Ç/—Å–¥–µ–ª–∫–∞)
function findCalltrackingTag(ctMap, mangoContact, mangoDeal){
  const a = cleanPhoneDigits(mangoContact);
  const b = cleanPhoneDigits(mangoDeal);
  if (a && ctMap.has(a)) return ctMap.get(a);
  if (b && ctMap.has(b)) return ctMap.get(b);
  return '';
}
function cleanPhoneDigits(s){
  if (s==null) return '';
  const d = String(s).replace(/\D/g,'');
  if (!d) return '';
  if (d.length===11 && /^[78]/.test(d)) return d.slice(1);
  if (d.length>=10) return d.slice(-10);
  return d;
}
function firstCleanPhone(raw){
  if (!raw) return '';
  const parts = String(raw).split(CFG.PHONE_SPLIT_RE).map(s=>s.trim()).filter(Boolean);
  for (const p of parts){
    const c = cleanPhoneDigits(p);
    if (c) return c;
  }
  return cleanPhoneDigits(raw);
}
function collectPhones(rows, idx){
  const set = new Set();
  if (idx<0) return set;
  rows.forEach(r=>{
    const p = firstCleanPhone(r[idx]);
    if (p) set.add(p);
  });
  return set;
}
// SITE
function aggregateSiteByPhone(t){
  const idx = {
    phone: indexOfAny(t.header, ['Site.Phone','Phone','–¢–µ–ª–µ—Ñ–æ–Ω']),
    date:  indexOfAny(t.header, ['Site.Date','Date','–î–∞—Ç–∞']),
    time:  indexOfAny(t.header, ['Site.Time','Time','–í—Ä–µ–º—è']),
    utm_s: indexOfAny(t.header, ['Site.utm_source','utm_source']),
    utm_m: indexOfAny(t.header, ['Site.utm_medium','utm_medium']),
    utm_c: indexOfAny(t.header, ['Site.utm_campaign','utm_campaign'])
  };
  const map = new Map();
  t.rows.forEach(r=>{
    const ph = firstCleanPhone(r[idx.phone]); if (!ph) return;
    const dt = mergeDateTime(r[idx.date], r[idx.time]);
    const cur = map.get(ph) || {};
    if (!cur.lastDate || toTs(dt) > toTs(cur.lastDate)) {
      cur.lastDate = dt;
      cur.utm_source = r[idx.utm_s] || cur.utm_source || '';
      cur.utm_medium = r[idx.utm_m] || cur.utm_medium || '';
      cur.utm_campaign = r[idx.utm_c] || cur.utm_campaign || '';
    }
    map.set(ph, cur);
  });
  return map;
}
// RESERVES
function aggregateResByPhone(t){
  const idx = {
    phone: indexOfAny(t.header, ['Res.Phone','–¢–µ–ª–µ—Ñ–æ–Ω','Phone']),
    amount:indexOfAny(t.header, ['Res.Amount','–°—á—ë—Ç, ‚ÇΩ','Amount','–°—É–º–º–∞']),
    dt:    indexOfAny(t.header, ['Res.Datetime','–î–∞—Ç–∞/–≤—Ä–µ–º—è','Datetime','–î–∞—Ç–∞'])
  };
  const map = new Map();
  t.rows.forEach(r=>{
    const ph = firstCleanPhone(r[idx.phone]); if (!ph) return;
    const amount = toNumber(r[idx.amount]);
    const dt = r[idx.dt];
    const cur = map.get(ph) || {visits:0, amount:0, lastVisit:''};
    cur.visits += 1;
    cur.amount += amount;
    if (!cur.lastVisit || toTs(dt) > toTs(cur.lastVisit)) cur.lastVisit = dt;
    map.set(ph, cur);
  });
  return map;
}
// GUESTS
function aggregateGuestsByPhone(t){
  const idx = {
    phone: indexOfAny(t.header, ['Guests.Phone','–¢–µ–ª–µ—Ñ–æ–Ω','Phone']),
    visits:indexOfAny(t.header, ['Guests.Visits','–ö–æ–ª-–≤–æ –≤–∏–∑–∏—Ç–æ–≤','VISITS_COUNT']),
    total: indexOfAny(t.header, ['Guests.Total','–û–±—â–∞—è —Å—É–º–º–∞','TOTAL_AMOUNT']),
    first: indexOfAny(t.header, ['Guests.FirstVisit','–ü–µ—Ä–≤—ã–π –≤–∏–∑–∏—Ç','FIRST_VISIT']),
    last:  indexOfAny(t.header, ['Guests.LastVisit','–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–∏–∑–∏—Ç','LAST_VISIT'])
  };
  const map = new Map();
  t.rows.forEach(r=>{
    const ph = firstCleanPhone(r[idx.phone]); if (!ph) return;
    const cur = map.get(ph) || {visits:0, total:0, firstVisit:'', lastVisit:''};
    cur.visits += toNumber(r[idx.visits]) || 0;
    cur.total += toNumber(r[idx.total]) || 0;
    const fv = r[idx.first], lv = r[idx.last];
    if (!cur.firstVisit || (fv && toTs(fv) < toTs(cur.firstVisit))) cur.firstVisit = fv;
    if (!cur.lastVisit  || (lv && toTs(lv)  > toTs(cur.lastVisit)))  cur.lastVisit  = lv;
    map.set(ph, cur);
  });
  return map;
}
function toNumber(v){ const n = Number(String(v).replace(/\s| /g,'').replace(',','.')); return isNaN(n)?0:n; }
function mergeDateTime(d,t){
  if (!d && !t) return '';
  if (d instanceof Date && (!t || t instanceof Date===false)) return d;
  if (d && t) return new Date(`${fmtDateISO(d)} ${String(t).slice(0,8)}`);
  return d||t||'';
}
function fmtDateISO(d){
  if (d instanceof Date) {
    const y=d.getFullYear(), m=('0'+(d.getMonth()+1)).slice(-2), da=('0'+d.getDate()).slice(-2);
    return `${y}-${m}-${da}`;
  }
  const s=String(d).trim();
  const m=s.match(/^(\d{1,2})[.\-\/](\d{1,2})[.\-\/](\d{2,4})/);
  if (m){
    const dd=('0'+m[1]).slice(-2), mo=('0'+m[2]).slice(-2), yy=m[3].length===2?('20'+m[3]):m[3];
    return `${yy}-${mo}-${dd}`;
  }
  return s;
}
function toTs(v){
  if (!v) return 0;
  if (v instanceof Date) return v.getTime();
  const s=String(v).trim();
  const m=s.match(/^(\d{1,2})[.\-\/](\d{1,2})[.\-\/](\d{2,4})(.*)$/);
  if (m){
    let y=m[3]; if (y.length===2) y='20'+y;
    const d=new Date(`${y}-${('0'+m[2]).slice(-2)}-${('0'+m[1]).slice(-2)} ${m[4]||''}`); 
    return d.getTime()||0;
  }
  const t=Date.parse(s); return isNaN(t)?0:t;
}
function daysBetween(a,b){
  const ta = toTs(a), tb = toTs(b);
  if (!ta || !tb) return '';
  return Math.floor((tb-ta)/(1000*60*60*24));
}
function chooseDateKey(header){
  if (header.includes('–°–¥–µ–ª–∫–∞.–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è')) return '–°–¥–µ–ª–∫–∞.–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è';
  if (header.includes('–°–¥–µ–ª–∫–∞.DATE')) return '–°–¥–µ–ª–∫–∞.DATE';
  return header[0];
}

// ---- –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ —Å–¥–µ–ª–∫–∏ ("–∞–≤—Ç–æ–º–∞—Ç—ã") ----
function normalizeStatus(raw){
  let s = String(raw||'').trim();
  // —É–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "–í–°–ï –ë–ê–†–´ –°–ï–¢–ò" + –ª—é–±–æ–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å (/, -, ‚Äî, ‚Äì) –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
  s = s.replace(/^\s*–≤—Å–µ\s*–±–∞—Ä—ã\s*—Å–µ—Ç–∏\s*(?:[\/\\|:\-‚Äì‚Äî]\s*)?/i, '');
  // –µ—Å–ª–∏ —è—á–µ–π–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —ç—Ç–æ—Ç –ø—Ä–µ—Ñ–∏–∫—Å ‚Äî —á–∏—Å—Ç–∏–º –ø–æ–ª–Ω–æ—Å—Ç—å—é
  s = s.replace(/^\s*–≤—Å–µ\s*–±–∞—Ä—ã\s*—Å–µ—Ç–∏\s*$/i, '');
  // —Å—Ä–µ–∑–∞–µ–º —Ö–≤–æ—Å—Ç—ã –≤–∏–¥–∞ " - —á—Ç–æ-—Ç–æ", "‚Äî —á—Ç–æ-—Ç–æ", "‚Äì —á—Ç–æ-—Ç–æ"
  s = s.replace(/\s*(?:-|‚Äì|‚Äî)\s*.*$/, '').trim();

  // –ø—Ä–∞–≤–∏–ª–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ (–æ—Ç –±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –∫ –æ–±—â–∏–º)
  const rules = [
    { re: /—É—Å–ø–µ—à.*–≤\s*—Ä–ø/i,                          norm: '–£—Å–ø–µ—à–Ω–æ –≤ –†–ü' },
    { re: /—É—Å–ø–µ—à.*—Ä–µ–∞–ª–∏–∑/i,                           norm: '–£—Å–ø–µ—à–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ' },
    { re: /–æ–ø–ª–∞—á/i,                                   norm: '–û–ø–ª–∞—á–µ–Ω–æ' },
    { re: /–∫–æ–Ω—Ç—Ä–æ–ª[—å—è]\s*–æ–ø–ª–∞—Ç/i,                    norm: '–ö–æ–Ω—Ç—Ä–æ–ª—å –æ–ø–ª–∞—Ç—ã' },
    { re: /–ø–µ—Ä–µ–Ω–æ—Å\s*—Å\s*–æ—Ç–∫—Ä—ã—Ç–æ–π\s*–¥–∞—Ç/i,          norm: '–ü–µ—Ä–µ–Ω–æ—Å —Å –æ—Ç–∫—Ä—ã—Ç–æ–π –¥–∞—Ç–æ–π' },
    { re: /–≤–æ–ø—Ä–æ—Å\s*–∫\s*–±–∞—Ä—É/i,                      norm: '–í–æ–ø—Ä–æ—Å –∫ –±–∞—Ä—É' },
    { re: /–æ—Ç–º–µ–Ω[–µ—ë]–Ω\s*–≤\s*—Ä–µ—Å—Ç–æ–ø–ª–µ–π—Å/i,            norm: '–û—Ç–º–µ–Ω–µ–Ω –≤ –†–µ—Å—Ç–æ–ø–ª–µ–π—Å' },
    { re: /–≤–∑—è–ª[–∞–∏]?\s*–≤\s*—Ä–∞–±–æ—Ç—É|–Ω–æ–≤(—ã–π|–∞—è)\s*–ª–∏–¥/i, norm: '–í–∑—è–ª–∏ –≤ —Ä–∞–±–æ—Ç—É' },
    { re: /–Ω–¥–∑|–Ω–µ\s*–¥–æ–∑–≤|–Ω–µ\s*–¥–æ–∑–≤–æ–Ω–∏–ª/i,             norm: '–ù–î–ó' },
    { re: /–∑–∞–∫—Ä—ã—Ç–æ.*–Ω–µ\s*—Ä–µ–∞–ª–∏–∑/i,                    norm: '–ó–∞–∫—Ä—ã—Ç–æ –∏ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ' }
  ];
  for (var i=0;i<rules.length;i++){
    if (rules[i].re.test(s)) return rules[i].norm;
  }
  return s || '–ù–æ–≤—ã–π –ª–∏–¥';
}

/** ---- –ü–æ—Ä—è–¥–æ–∫ –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ ---- **/
function humanizeHeader(h){
  const rename = {
    // –°–¥–µ–ª–∫–∞ ‚Äî –∫–æ—Ä–æ—Ç–∫–∏–µ —Ä—É—Å—Å–∫–∏–µ
    '–°–¥–µ–ª–∫–∞.ID':'ID',
    '–°–¥–µ–ª–∫–∞.–ù–∞–∑–≤–∞–Ω–∏–µ':'–ù–∞–∑–≤–∞–Ω–∏–µ',
    '–°–¥–µ–ª–∫–∞.–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π':'–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π',
    '–°–¥–µ–ª–∫–∞.–°—Ç–∞—Ç—É—Å':'–°—Ç–∞—Ç—É—Å',
    '–°–¥–µ–ª–∫–∞.–ë—é–¥–∂–µ—Ç':'–ë—é–¥–∂–µ—Ç',
    '–°–¥–µ–ª–∫–∞.–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è':'–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è',
    '–°–¥–µ–ª–∫–∞.–¢–µ–≥–∏':'–¢–µ–≥–∏',
    '–°–¥–µ–ª–∫–∞.–î–∞—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∏—è':'–î–∞—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∏—è',

    // –û–±–æ–≥–∞—â–µ–Ω–∏–µ (site/rp/guests)
    'Site.–ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞—è–≤–∫–∞':'–ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞—è–≤–∫–∞',
    'Guests.–í–∏–∑–∏—Ç–æ–≤':'–í–∏–∑–∏—Ç–æ–≤',
    'Guests.–°—É–º–º–∞ ‚ÇΩ':'–°—É–º–º–∞ ‚ÇΩ',
    'Guests.–ü–µ—Ä–≤—ã–π –≤–∏–∑–∏—Ç':'–ü–µ—Ä–≤—ã–π –≤–∏–∑–∏—Ç',
    'Guests.–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–∏–∑–∏—Ç':'–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–∏–∑–∏—Ç'
  };
  if (rename[h]) return rename[h];

  // –°–Ω–∏–º–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã
  const prefixes = ['–°–¥–µ–ª–∫–∞.', '–ö–æ–Ω—Ç–∞–∫—Ç.', 'Site.', 'Guests.', 'Res.', 'RP.'];
  for (var p of prefixes) { if (h.indexOf(p)===0) { h = h.substring(p.length); break; } }
  return h;
}

// –°—Ç—Ä–æ–∏—Ç —Ç–æ—á–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –∫–æ–ª–æ–Ω–æ–∫ –ø–æ —Å–µ–∫—Ü–∏—è–º
function computeOrder(header, sections){
  const idx = {}; header.forEach((h,i)=>idx[h]=i);
  const order=[]; const spans=[];
  sections.forEach(sec=>{
    const present = sec.cols.map(c=>idx[c]).filter(i=>i!=null);
    if (present.length){
      order.push(...present);
      spans.push({title:sec.title, width:present.length});
    }
  });
  // –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ ‚Äî –≤ –∫–æ–Ω–µ—Ü
  const seen = new Set(order);
  const rest = header.map((_,i)=>i).filter(i=>!seen.has(i));
  if (rest.length){ order.push(...rest); spans.push({title:'(–ø—Ä–æ—á–µ–µ)', width:rest.length}); }
  return {order, spans};
}

// –†–∏—Å—É–µ–º —Å–µ–∫—Ü–∏–∏ –ø–æ —Ç–æ—á–Ω—ã–º span‚Äô–∞–º
function drawSectionTitlesBySpans(sh, spans){
  let col = 1;
  spans.forEach(s=>{
    const r = sh.getRange(1,col,1,Math.max(1,s.width));
    if (s.width>1) r.merge();
    r.setValue(s.title).setHorizontalAlignment('center').setFontWeight('bold');
    col += s.width;
  });
}

// –¢–æ–ª—å–∫–æ –≤–ø–∏—Å—ã–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ø–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü –∫–∞–∂–¥–æ–≥–æ —Å–ø–∞–Ω–∞, –Ω–µ —Ç—Ä–æ–≥–∞—è —Å–ª–∏—è–Ω–∏—è/—Å—Ç–∏–ª–∏
function drawSectionTitlesPreserve(sh, spans){
  let col = 1;
  spans.forEach(s => {
    // –ü–∏—à–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–æ–ª—å–∫–æ –≤ –ø–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü —Å–ø–∞–Ω–∞. –ï—Å–ª–∏ —Ç–∞–º —Å–ª–∏—è–Ω–∏–µ ‚Äî –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–∏—Ç—Å—è –∫ –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω–æ–π —è—á–µ–π–∫–µ.
    sh.getRange(1, col).setValue(s.title);
    col += Math.max(1, s.width);
  });
}
function drawSectionBordersBySpans(sh, spans, totalUsedRows){
  const prop = PropertiesService.getDocumentProperties();
  const key = `borders_spans_${sh.getSheetId()}_${spans.map(s=>s.width).join('-')}_${totalUsedRows||0}`;
  if (prop.getProperty(key)) return;

  const usedRows = Math.max(2, Number(totalUsedRows)||2);
  const totalWidth = spans.reduce((a,s)=>a+s.width,0);

  sh.getRange(2, 1, Math.max(1, usedRows - 1), totalWidth).setBorder(true,true,true,true,true,true);

  let col=1;
  spans.forEach(s=>{
    const after = col + s.width - 1;
    const rng = sh.getRange(1, after, usedRows, 1);
    rng.setBorder(false, true, false, false, false, false, null, SpreadsheetApp.BorderStyle.SOLID_MEDIUM);
    col += s.width;
  });

  prop.setProperty(key, '1');
}

/** ---- –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä—ã –ª–∏—Å—Ç–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é ---- **/
function ensureGrid(sh, needRows, needCols){
  var maxRows = sh.getMaxRows();
  var maxCols = sh.getMaxColumns();
  if (maxCols < needCols) {
    sh.insertColumnsAfter(maxCols, needCols - maxCols);
  }
  if (maxRows < needRows) {
    sh.insertRowsAfter(maxRows, needRows - maxRows);
  }
}

/** ---- –ü–æ–¥—Å–≤–µ—Ç–∫–∞, —Å—Ä–µ–∑—ã, –ª–æ–≥–∏–∫–∞ ---- **/
// –∫—Ä–∞—Å–∏–º —Ç–æ–ª—å–∫–æ –∫–æ–ª–æ–Ω–∫—É A (ID) –∏ –∫–æ–ª–æ–Ω–∫—É "–°—Ç–∞—Ç—É—Å" –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º
function colorByRules(sh, header, rows){
  const n = Array.isArray(rows) ? rows.length : 0;
  if (!n) return;

  const start = 3; // –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  const colId = 1; // A
  const iAge    = header.indexOf('–í–æ–∑—Ä–∞—Å—Ç —Å–¥–µ–ª–∫–∏ (–¥–Ω.)');
  const iDaysTo = header.indexOf('–î–Ω–µ–π –¥–æ –±—Ä–æ–Ω–∏');
  const iStatus = header.indexOf('–°—Ç–∞—Ç—É—Å');
  const iId     = header.indexOf('ID');

  const prev = getKnownIds();
  const backgrounds = new Array(n).fill(null).map(()=>[null]);

  for (let r = 0; r < n; r++){
    const row = rows[r];
    const id       = iId     > -1 ? String(row[iId]||'').trim() : '';
    const age      = iAge    > -1 ? Number(row[iAge])    : '';
    const daysLeft = iDaysTo > -1 ? Number(row[iDaysTo]) : '';
    const status   = iStatus > -1 ? String(row[iStatus]||'') : '';

    let bg = null;
    if (id && !prev.has(id))                                              bg = CFG.COLORS.NEW;
    if ((daysLeft === 0 || daysLeft === 1) && !CFG.CLOSED_RE.test(status)) bg = CFG.COLORS.URGENT;
    if ((typeof daysLeft === 'number' && daysLeft < 0) && !CFG.CLOSED_RE.test(status)) bg = CFG.COLORS.OVERDUE;
    if (typeof age === 'number' && age > 7)                                bg = CFG.COLORS.LONG;

    backgrounds[r][0] = bg;
  }

  // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ —Å–∞–º–æ–π –∫–æ–ª–æ–Ω–∫–∏ "–°—Ç–∞—Ç—É—Å" –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º
  const colStatus1 = (iStatus > -1) ? (iStatus + 1) : -1; // –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ 1-based –∏–Ω–¥–µ–∫—Å –∫–æ–ª–æ–Ω–∫–∏
  if (colStatus1 > 0) {
    const statusBackgrounds = new Array(n).fill(null).map(()=>[null]);
    for (let r = 0; r < n; r++){
      const st = iStatus > -1 ? rows[r][iStatus] : '';
      statusBackgrounds[r][0] = statusColor(st);
    }
    sh.getRange(start, colStatus1, n, 1).setBackgrounds(statusBackgrounds);
  }

  sh.getRange(start, colId, n, 1).setBackgrounds(backgrounds);

  const ids = rows.map(r => String(iId>-1 ? (r[iId]||'') : '').trim()).filter(Boolean);
  setKnownIds(new Set(ids));
}

// –ú–∞–ø–ø–µ—Ä —Ü–≤–µ—Ç–∞ –ø–æ —Å—Ç–∞—Ç—É—Å—É
function statusColor(status){
  const s = normalizeStatus(status);
  if (CFG.STATUS_COLORS[s]) return CFG.STATUS_COLORS[s];
  // Fallback –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
  if (/—É—Å–ø–µ—à/i.test(s) || /–æ–ø–ª–∞—á/i.test(s)) return CFG.STATUS_COLORS['–û–ø–ª–∞—á–µ–Ω–æ'];
  if (/–æ—Ç–º–µ–Ω/i.test(s) || /–Ω–µ\s*—Ä–µ–∞–ª–∏–∑/i.test(s)) return CFG.STATUS_COLORS['–ó–∞–∫—Ä—ã—Ç–æ –∏ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ'];
  if (/–∫–æ–Ω—Ç—Ä–æ–ª/i.test(s)) return CFG.STATUS_COLORS['–ö–æ–Ω—Ç—Ä–æ–ª—å –æ–ø–ª–∞—Ç—ã'];
  if (/–ø–µ—Ä–µ–Ω–æ—Å/i.test(s)) return CFG.STATUS_COLORS['–ü–µ—Ä–µ–Ω–æ—Å —Å –æ—Ç–∫—Ä—ã—Ç–æ–π –¥–∞—Ç–æ–π'];
  if (/–≤–æ–ø—Ä–æ—Å/i.test(s)) return CFG.STATUS_COLORS['–í–æ–ø—Ä–æ—Å –∫ –±–∞—Ä—É'];
  if (/–Ω–¥–∑/i.test(s)) return CFG.STATUS_COLORS['–ù–î–ó'];
  if (/–≤\s*—Ä–∞–±–æ—Ç–µ|–≤–∑—è–ª–∏\s*–≤\s*—Ä–∞–±–æ—Ç—É/i.test(s)) return CFG.STATUS_COLORS['–í–∑—è–ª–∏ –≤ —Ä–∞–±–æ—Ç—É'];
  return null; // –Ω–µ—Ç —Å–ø–µ—Ü-–æ–∫—Ä–∞—Å–∫–∏
}

/**
 * –ê–∫–∫—É—Ä–∞—Ç–Ω–æ –∫—Ä–∞—Å–∏—Ç –¢–û–õ–¨–ö–û –∫–æ–ª–æ–Ω–∫—É "–°—Ç–∞—Ç—É—Å" –ø–æ –≥–æ—Ç–æ–≤—ã–º –ø—Ä–∞–≤–∏–ª–∞–º statusColor(),
 * –Ω–µ –º–µ–Ω—è—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –∏ –Ω–µ –∑–∞–≤–∏—Å—è –æ—Ç CFG.PRESERVE_STYLES.
 */
function paintStatusColumn(sh, header, rows){
  const n = Array.isArray(rows) ? rows.length : 0;
  if (!n) return;

  const iStatus = header.indexOf('–°—Ç–∞—Ç—É—Å');
  if (iStatus < 0) return;

  const colStatus1 = iStatus + 1; // 1-based
  const startRow = 3;             // –¥–∞–Ω–Ω—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å–æ —Å—Ç—Ä–æ–∫–∏ 3

  // –°–æ–±–∏—Ä–∞–µ–º —Ñ–æ–Ω –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
  const backgrounds = new Array(n);
  for (let r = 0; r < n; r++){
    const st = rows[r][iStatus];
    backgrounds[r] = [ statusColor(st) ];
  }

  // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ–Ω—ã —Ç–æ–ª—å–∫–æ –∫ —ç—Ç–æ–π –æ–¥–Ω–æ–π –∫–æ–ª–æ–Ω–∫–µ
  sh.getRange(startRow, colStatus1, n, 1).setBackgrounds(backgrounds);
}
function getKnownIds(){
  const prop = PropertiesService.getDocumentProperties();
  const raw = prop.getProperty('known_ids') || '';
  const set = new Set();
  raw.split(',').forEach(x=>{ x=x.trim(); if (x) set.add(x); });
  return set;
}
function setKnownIds(set){
  const prop = PropertiesService.getDocumentProperties();
  prop.setProperty('known_ids', [...set].join(','));
}

/** ---- –°—Ä–µ–∑—ã ---- **/
function makeSubsets(ss, header, rows){
  const iAge = header.indexOf('–í–æ–∑—Ä–∞—Å—Ç —Å–¥–µ–ª–∫–∏ (–¥–Ω.)');
  const iDaysTo = header.indexOf('–î–Ω–µ–π –¥–æ –±—Ä–æ–Ω–∏');
  const iStatus = header.indexOf('–°—Ç–∞—Ç—É—Å');

  const todayNew = rows.filter(r => toNum(r[iAge])!=='' && toNum(r[iAge])<=7);
  const problematic = rows.filter(r=>{
    const days = toNum(r[iDaysTo]);
    const st = String(r[iStatus]||'');
    return (days!=='' && (days<=1 || days<0)) && !CFG.CLOSED_RE.test(st);
  });

  writeSheet(ss, CFG.SHEETS.NEW_ONLY, header, todayNew);
  writeSheet(ss, CFG.SHEETS.PROBLEM, header, problematic);
}
function toNum(v){ const n=Number(v); return isNaN(n)?'':n; }
function writeSheet(ss, name, header, rows){
  let sh = ss.getSheetByName(name);
  if (!sh) sh = ss.insertSheet(name); else sh.clear();
  sh.getRange(1,1,1,header.length).setValues([header]).setFontWeight('bold');
  if (rows.length) sh.getRange(2,1,rows.length,header.length).setValues(rows);
  sh.setFrozenRows(1);
  const _oldFilterSub = (typeof sh.getFilter === 'function') ? sh.getFilter() : null;
  if (_oldFilterSub) _oldFilterSub.remove();
  sh.getRange(1,1,1,header.length).createFilter();
}

/** ---- –ú–µ—Ç—Ä–∏–∫–∏ –ø–æ–∫—Ä—ã—Ç–∏—è ---- **/
function calcMatchStats(phoneSet, dicts){
  const phones = [...phoneSet];
  function cover(map){ let k=0; phones.forEach(p=>{ if (map.get(p)) k++; }); return phones.length? Math.round(100*k/phones.length):0; }
  return { totalWithPhone: phones.length, site: cover(dicts.siteAgg), res: cover(dicts.resAgg), gue: cover(dicts.gueAgg) };
}

/** ---- –õ–û–ì ---- **/
function logAppend(ss, msg){
  const sh = ss.getSheetByName(CFG.SHEETS.LOG) || ss.insertSheet(CFG.SHEETS.LOG);
  if (sh.getLastRow()===0) sh.appendRow(['when','message']);
  sh.appendRow([new Date(), msg]);
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –∫–æ–ª–æ–Ω–∫—É "R.–ò—Å—Ç–æ—á–Ω–∏–∫ –¢–ï–õ —Å–¥–µ–ª–∫–∏" –≤ –ª–∏—Å—Ç–µ –†–ê–ë–û–ß–ò–ô –ê–ú–û,
 * –Ω–µ –º–µ–Ω—è—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞. –ò—â–µ—Ç –Ω–æ–º–µ—Ä–∞ –∏–∑ –∫–æ–ª–æ–Ω–æ–∫ K –∏ L (–ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º),
 * –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–µ–≥ –∏–∑ –ª–∏—Å—Ç–∞ "–ö–æ–ª–ª–¢—Ä–µ–∫–∏–Ω–≥" (–∫–æ–ª–æ–Ω–∫–∞ A ‚Äî –Ω–æ–º–µ—Ä, B ‚Äî —Ç–µ–≥).
 */
function updateCtTagsOnWorking(){
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sh = ss.getSheetByName(CFG.SHEETS.OUT);
  if (!sh) throw new Error('–ù–µ—Ç –ª–∏—Å—Ç–∞ "' + CFG.SHEETS.OUT + '"');

  // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤–æ 2-–π —Å—Ç—Ä–æ–∫–µ
  const header = sh.getRange(2,1,1,sh.getLastColumn()).getValues()[0].map(String);

  const colMangoContact = header.indexOf('–ö–æ–Ω—Ç–∞–∫—Ç.–ù–æ–º–µ—Ä –ª–∏–Ω–∏–∏ MANGO OFFICE') + 1;
  const colMangoDeal    = header.indexOf('–°–¥–µ–ª–∫–∞.–ù–æ–º–µ—Ä –ª–∏–Ω–∏–∏ MANGO OFFICE') + 1;
  let   colOut          = header.indexOf('R.–ò—Å—Ç–æ—á–Ω–∏–∫ –¢–ï–õ —Å–¥–µ–ª–∫–∏') + 1;

  if (colMangoContact <= 0 || colMangoDeal <= 0) {
    throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω—ã –∑–∞–≥–æ–ª–æ–≤–∫–∏ "–ö–æ–Ω—Ç–∞–∫—Ç.–ù–æ–º–µ—Ä –ª–∏–Ω–∏–∏ MANGO OFFICE" –∏–ª–∏ "–°–¥–µ–ª–∫–∞.–ù–æ–º–µ—Ä –ª–∏–Ω–∏–∏ MANGO OFFICE" –≤–æ 2-–π —Å—Ç—Ä–æ–∫–µ –ª–∏—Å—Ç–∞ "' + CFG.SHEETS.OUT + '"');
  }
  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ—Ä–∂–∏—Ç —Å—Ç—Ä–æ–≥—É—é V-–∫–æ–ª–æ–Ω–∫—É ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë, –∏–Ω–∞—á–µ –∏—â–µ–º –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É
  if (colOut <= 0) colOut = 22; // V

  const lastRow = sh.getLastRow();
  const n = Math.max(0, lastRow - 2);
  if (n === 0) return;

  const mangoC = sh.getRange(3, colMangoContact, n, 1).getValues();
  const mangoD = sh.getRange(3, colMangoDeal,    n, 1).getValues();

  // –°–æ–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç—É –Ω–æ–º–µ—Ä->—Ç–µ–≥ –∏–∑ –ª–∏—Å—Ç–∞ "–ö–æ–ª–ª–¢—Ä–µ–∫–∏–Ω–≥" (A: –Ω–æ–º–µ—Ä, B: —Ç–µ–≥, C: –∫–∞–Ω–∞–ª)
  const tCall = readTable(ss, CFG.SHEETS.CALL);
  const ctMap = new Map();
  if (tCall.rows && tCall.rows.length){
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã A –∏ B (–Ω–∞ —Å–ª—É—á–∞–π –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —à–∞–ø–∫–∏)
    const head = tCall.header.map(h => String(h).trim().toLowerCase());
    let iNum = head.indexOf('–∫–æ–Ω—Ç–∞–∫—Ç.–Ω–æ–º–µ—Ä –ª–∏–Ω–∏–∏ mango office');
    let iTag = head.indexOf('r.–∏—Å—Ç–æ—á–Ω–∏–∫ —Ç–µ–ª —Å–¥–µ–ª–∫–∏');
    if (iNum === -1) iNum = 0;
    if (iTag === -1) iTag = (tCall.header.length >= 2 ? 1 : 0);

    tCall.rows.forEach(r=>{
      const num = cleanPhoneDigits(r[iNum]);
      const tag = normalizeCtTag(r[iTag]);
      if (num && tag) ctMap.set(num, tag);
    });
  }

  const out = new Array(n).fill('').map(()=>['']);
  for (let i=0;i<n;i++){
    const tag = findCalltrackingTag(ctMap, mangoC[i][0], mangoD[i][0]);
    out[i][0] = tag || '';
  }

  // –¢–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏—è ‚Äî —Ñ–æ—Ä–º–∞—Ç –Ω–µ —Ç—Ä–æ–≥–∞–µ–º
  sh.getRange(3, colOut, n, 1).setValues(out);
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –¢–û–õ–¨–ö–û –∫–æ–ª–æ–Ω–∫—É "TIME" –Ω–∞ –ª–∏—Å—Ç–µ ¬´–†–ê–ë–û–ß–ò–ô –ê–ú–û¬ª.
 * - –ò—â–µ—Ç –∫–æ–ª–æ–Ω–∫—É –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É –≤–æ 2‚Äë–π —Å—Ç—Ä–æ–∫–µ ("TIME").
 * - –î–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏ –±–µ—Ä—ë—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –ø—Ä–∏–≤–æ–¥–∏—Ç –µ–≥–æ –∫ —Ñ–æ—Ä–º–∞—Ç—É –≤—Ä–µ–º–µ–Ω–∏ (hh:mm).
 * - –ï—Å–ª–∏ "TIME" –ø—É—Å—Ç–æ, –Ω–æ –µ—Å—Ç—å "–í—Ä–µ–º—è –ø—Ä–∏—Ö–æ–¥–∞" ‚Äî –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –µ–≥–æ.
 * - –§–æ—Ä–º–∞—Ç —è—á–µ–µ–∫ —Å—Ç–∞–≤–∏—Ç 'hh:mm', –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –Ω–µ —Ç—Ä–æ–≥–∞–µ—Ç.
 */
function updateTimeOnlyOnWorking(){
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sh = ss.getSheetByName(CFG.SHEETS.OUT);
  if (!sh) throw new Error('–ù–µ—Ç –ª–∏—Å—Ç–∞ "' + CFG.SHEETS.OUT + '"');

  // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –≤–æ 2-–π —Å—Ç—Ä–æ–∫–µ
  const header = sh.getRange(2,1,1,sh.getLastColumn()).getValues()[0].map(String);

  const colTIME = header.indexOf('TIME') + 1;
  if (colTIME <= 0) throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ "TIME" –≤–æ 2-–π —Å—Ç—Ä–æ–∫–µ –ª–∏—Å—Ç–∞ "' + CFG.SHEETS.OUT + '"');

  // –ù–∞ —Å–ª—É—á–∞–π —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ ‚Äî –∫–æ–ª–æ–Ω–∫–∞ "–í—Ä–µ–º—è –ø—Ä–∏—Ö–æ–¥–∞"
  const colArrival = header.indexOf('–í—Ä–µ–º—è –ø—Ä–∏—Ö–æ–¥–∞') + 1;

  const lastRow = sh.getLastRow();
  const n = Math.max(0, lastRow - 2);
  if (n === 0) return;

  const rngTime = sh.getRange(3, colTIME, n, 1);
  const timeVals = rngTime.getValues();

  let arrivalVals = null;
  if (colArrival > 0) {
    arrivalVals = sh.getRange(3, colArrival, n, 1).getValues();
  }

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∫ –≤—Ä–µ–º–µ–Ω–∏
  const out = new Array(n).fill(null).map(()=>['']);
  for (let i=0;i<n;i++){
    let v = timeVals[i][0];

    // –ï—Å–ª–∏ TIME –ø—É—Å—Ç–æ, –ø—Ä–æ–±—É–µ–º –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å "–í—Ä–µ–º—è –ø—Ä–∏—Ö–æ–¥–∞"
    if ((v === '' || v == null) && arrivalVals) v = arrivalVals[i][0];

    // –ï—Å–ª–∏ –¥–∞—Ç–∞/–≤—Ä–µ–º—è ‚Äî –±–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è
    if (v instanceof Date) {
      // –°–æ–∑–¥–∞—ë–º "—á–∏—Å—Ç–æ–µ" –≤—Ä–µ–º—è –∫–∞–∫ –¥–æ–ª—é —Å—É—Ç–æ–∫
      const t = new Date(v);
      const ms = t.getHours()*3600000 + t.getMinutes()*60000 + t.getSeconds()*1000;
      out[i][0] = ms / 86400000; // –∑–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –≥—É–≥–ª-—Ç–∞–±–ª–∏—Ü
      continue;
    }

    // –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ ‚Äî –ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å HH:MM(:SS)
    const s = String(v||'').trim();
    if (s) {
      const m = s.match(/(\d{1,2}):(\d{2})(?::(\d{2}))?/);
      if (m) {
        const h = Math.min(23, Number(m[1]));
        const min = Math.min(59, Number(m[2]));
        const sec = Math.min(59, Number(m[3]||'0'));
        const ms = h*3600000 + min*60000 + sec*1000;
        out[i][0] = ms / 86400000;
        continue;
      }
    }

    // –ò–Ω–∞—á–µ –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ
    out[i][0] = '';
  }

  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏—è –∏ —Ñ–æ—Ä–º–∞—Ç
  rngTime.setValues(out).setNumberFormat('hh:mm');
}
